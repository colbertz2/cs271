Microsoft (R) Macro Assembler Version 14.23.28106.4	    11/15/19 20:13:19
3Arithmetic Demo with Procedures           (hw3.asm	     Page 1 - 1


				TITLE Arithmetic Demo with Procedures           (hw3.asm)

				; Author: Zach Colbert
				; CS 271 / Homework 3                 Date: 15 November 2019
				; Description: Demonstrates arithmetic operations using user-inputted operands.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat, stdcall
hw3.asm(10) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto, dwExitCode:dword

				;CONSTANT DEFINITIONS
 = "Arithmetic Demo with Pr	PROG_NAME   EQU <"Arithmetic Demo with Procedures", 0>
   ocedures", 0
 = "by Zach Colbert", 0		AUTH_NAME   EQU <"by Zach Colbert", 0>
 = "Enter two positive inte	USER_INSTRUCTION    EQU <"Enter two positive integers for arithmetic demo.", 0>
   gers for arithmetic demo
   .", 0
 = "First operand [1-10]: "	PROMPT_1    EQU <"First operand [1-10]: ", 0>
   , 0
 = "Second operand [1-10]: 	PROMPT_2    EQU <"Second operand [1-10]: ", 0>
   ", 0
 = " is too small. Enter a 	TOO_LOW     EQU <" is too small. Enter a number at least ", 0>
   number at least ", 0
 = " is too large. Enter a 	TOO_HIGH    EQU <" is too large. Enter a number at most ", 0>
   number at most ", 0
 = " + ", 0			ADD_CONST   EQU <" + ", 0>
 = " - ", 0			SUB_CONST   EQU <" - ", 0>
 = " * ", 0			MUL_CONST   EQU <" * ", 0>
 = " / ", 0			DIV_CONST   EQU <" / ", 0>
 = " remainder ", 0		REM_CONST   EQU <" remainder ", 0>
 = " = ", 0			EQU_CONST   EQU <" = ", 0>
				; BYE_CONST   EQU <"So long, and thanks for all the ints!", 0>

 = 00000001			OP_MIN  =   1       ; Minimum operand value
 = 0000000A			OP_MAX  =   10      ; Maximum operand value

 00000000			.data
				    ; Store constants in memory (?)
 00000000 41 72 69 74 68	    progName    BYTE    PROG_NAME
	   6D 65 74 69 63
	   20 44 65 6D 6F
	   20 77 69 74 68
	   20 50 72 6F 63
	   65 64 75 72 65
	   73 00
 00000020 62 79 20 5A 61	    authName    BYTE    AUTH_NAME
	   63 68 20 43 6F
	   6C 62 65 72 74
	   00
 00000030 45 6E 74 65 72	    uInstr      BYTE    USER_INSTRUCTION
	   20 74 77 6F 20
	   70 6F 73 69 74
	   69 76 65 20 69
	   6E 74 65 67 65
	   72 73 20 66 6F
	   72 20 61 72 69
	   74 68 6D 65 74
	   69 63 20 64 65
	   6D 6F 2E 00
 00000061 46 69 72 73 74	    prompt1     BYTE    PROMPT_1
	   20 6F 70 65 72
	   61 6E 64 20 5B
	   31 2D 31 30 5D
	   3A 20 00
 00000078 53 65 63 6F 6E	    prompt2     BYTE    PROMPT_2
	   64 20 6F 70 65
	   72 61 6E 64 20
	   5B 31 2D 31 30
	   5D 3A 20 00
 00000090 20 69 73 20 74	    valTooLow   BYTE    TOO_LOW
	   6F 6F 20 73 6D
	   61 6C 6C 2E 20
	   45 6E 74 65 72
	   20 61 20 6E 75
	   6D 62 65 72 20
	   61 74 20 6C 65
	   61 73 74 20 00
 000000B8 20 69 73 20 74	    valTooHigh  BYTE    TOO_HIGH
	   6F 6F 20 6C 61
	   72 67 65 2E 20
	   45 6E 74 65 72
	   20 61 20 6E 75
	   6D 62 65 72 20
	   61 74 20 6D 6F
	   73 74 20 00
 000000DF 20 2B 20 00		    add_str     BYTE    ADD_CONST
 000000E3 20 2D 20 00		    sub_str     BYTE    SUB_CONST
 000000E7 20 2A 20 00		    mul_str     BYTE    MUL_CONST
 000000EB 20 2F 20 00		    div_str     BYTE    DIV_CONST
 000000EF 20 72 65 6D 61	    rem_str     BYTE    REM_CONST
	   69 6E 64 65 72
	   20 00
 000000FB 20 3D 20 00		    equ_str     BYTE    EQU_CONST

				    ; Can't print exclamation when I use the same method as other strings.
				    ; Why is that?
 000000FF 53 6F 20 6C 6F	    bye_str     BYTE    "So long, and thanks for all the ints!", 0
	   6E 67 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 61
	   6C 6C 20 74 68
	   65 20 69 6E 74
	   73 21 00

				    ; Global storage for user operands
 00000125 00000000		    n1  DWORD   ?
 00000129 00000000		    n2  DWORD   ?

				    ; Global storage for arithmetic results
 0000012D 00000000		    radd    DWORD   ?
 00000131 00000000		    rsub    DWORD   ?
 00000135 00000000		    rmul    DWORD   ?
 00000139 00000000		    rdiv    REAL4  ?

 00000000			.code
 00000000			main PROC
 00000000  E8 00000078		    call intro              ; Print intro message
				    
 00000005  68 00000125 R	    push offset n1
 0000000A  68 00000061 R	    push offset prompt1
 0000000F  E8 0000009E		    call getInput           ; Get first operand

 00000014  68 00000129 R	    push offset n2
 00000019  68 00000078 R	    push offset prompt2
 0000001E  E8 0000008F		    call getInput           ; Get second operand

 00000023  68 0000012D R	    push offset radd
 00000028  E8 000000F6		    call demoAdd            ; radd = n1 + n2

 0000002D  FF 35 00000125 R	    push n1
 00000033  FF 35 00000129 R	    push n2
 00000039  68 00000131 R	    push offset rsub
 0000003E  E8 000000FF		    call demoSub            ; rsub = n1 - n2 (unsigned)

 00000043  68 00000125 R	    push offset n1
 00000048  68 00000129 R	    push offset n2
 0000004D  68 00000135 R	    push offset rmul
 00000052  E8 00000101		    call demoMul            ; rmul = n1 * n2

 00000057  A1 00000125 R	    mov EAX, n1
 0000005C  8B 1D 00000129 R	    mov EBX, n2
 00000062  68 00000139 R	    push offset rdiv
 00000067  E8 0000010A		    call demoDiv            ; rdiv = n1 / n2 (floating point)

 0000006C  E8 00000127		    call printResults       ; It prints. Results.

 00000071  E8 0000020A		    call outro              ; The Big Goodbye

				    invoke ExitProcess,0   ; exit to operating system
 00000076  6A 00	   *	    push   +000000000h
 00000078  E8 00000000 E   *	    call   ExitProcess
 0000007D			main ENDP

				; PROCEDURE DEFINITIONS

				; intro: Prints title, author, and initial user instructions.
				;   Receives: Global variables progName, authName, uInstr
				;   Returns: (None)
				;   Preconditions: Initialize progName, authName, uInstr as byte strings
				;   Registers changed: None
 0000007D			intro PROC
 0000007D  60			    pushad  ; Save registers

 0000007E  BA 00000000 R	    mov EDX, offset progName
 00000083  E8 00000000 E	    call WriteString            ; Print program name from EDX
 00000088  E8 00000000 E	    call Crlf

 0000008D  BA 00000020 R	    mov EDX, offset authName
 00000092  E8 00000000 E	    call WriteString            ; Print author name from EDX
 00000097  E8 00000000 E	    call Crlf
 0000009C  E8 00000000 E	    call Crlf

 000000A1  BA 00000030 R	    mov EDX, offset uInstr
 000000A6  E8 00000000 E	    call WriteString            ; Print user instructions from EDX
 000000AB  E8 00000000 E	    call Crlf

 000000B0  61			    popad   ; Restore registers
 000000B1  C3			    ret     ; Pop stack to return EIP to calling proc... No params to pop
 000000B2			intro ENDP


				; getInput: Prompts user for input, validates against min/max values, and stores
				;           the value in a global variable.
				;   Receives: Memory address at which to store value, passed by stack.
				;             Offset of string prompt message, passed by stack.
				;             Min/max values defined as global constants OP_MIN and OP_MAX.
				;   Returns: Unsigned integer stored in memory.
				;   Preconditions: DWORD memory space allocated and writeable. OP_MIN and OP_MAX
				;                  initialized to unsigned integer values.
				;   Registers changed: None
 000000B2			getInput PROC
 000000B2  55			    push EBP
 000000B3  8B EC		    mov EBP, ESP
 000000B5  60			    pushad

 000000B6			    validateLoop:
 000000B6  8B 55 08		        mov EDX, [EBP + 8]      ; Move address of prompt string from stack
 000000B9  E8 00000000 E	        call WriteString        ; Print user prompt
 000000BE  E8 00000000 E	        call ReadDec            ; Get user input
 000000C3  83 F8 01		        cmp EAX, OP_MIN         ; Compare to minimum value
 000000C6  7C 07		        jl  lowBound            ; Try again if less than minimum
 000000C8  83 F8 0A		        cmp EAX, OP_MAX         ; Compare to max value
 000000CB  7F 27		        jg  highBound           ; Try again if greater than maximum
 000000CD  EB 4A		        jmp inBound             ; Value is within bounds!

 000000CF			    lowBound:
 000000CF  E8 00000000 E	        call WriteDec
 000000D4  BA 00000090 R	        mov EDX, offset valTooLow
 000000D9  E8 00000000 E	        call WriteString        ; Print a warning message
 000000DE  B8 00000001		        mov EAX, OP_MIN
 000000E3  E8 00000000 E	        call WriteDec
 000000E8  E8 00000000 E	        call Crlf
 000000ED  E8 00000000 E	        call Crlf
 000000F2  EB C2		        jmp validateLoop        ; Try again

 000000F4			    highBound:
 000000F4  E8 00000000 E	        call WriteDec
 000000F9  BA 000000B8 R	        mov EDX, offset valTooHigh
 000000FE  E8 00000000 E	        call WriteString        ; Print a warning message
 00000103  B8 0000000A		        mov EAX, OP_MAX
 00000108  E8 00000000 E	        call WriteDec
 0000010D  E8 00000000 E	        call Crlf
 00000112  E8 00000000 E	        call Crlf
 00000117  EB 9D		        jmp validateLoop        ; Try again

 00000119			    inBound:
 00000119  8B 75 0C		        mov ESI, [EBP + 12]
 0000011C  89 06		        mov [ESI], EAX      ; Store the user's input in memory

 0000011E  61			    popad
 0000011F  5D			    pop EBP
 00000120  C2 0008		    ret 8
 00000123			getInput ENDP


				; demoAdd: Adds two parameters from global variables using the FPU.
				;   Receives:
				;       n1 - Unsigned, integer operand stored in global variable n1
				;       n2 - Unsigned, integer operand stored in global variable n2
				;       rAdd - DWORD memory reference to store result of addition, pass by stack
				;   Returns:
				;       rAdd - Unsigned, integer result stored in memory
				;   Preconditions:
				;       Initialize global vars n1 and n2 with DWORD values.
				;       Declare DWORD memory space for result.
				;   Registers changed: None
 00000123			demoAdd PROC
 00000123  55			    push EBP
 00000124  8B EC		    mov EBP, ESP
 00000126  60			    pushad

 00000127  8B 75 08		    mov ESI, [EBP + 8]      ; Memory location where we'll store the result

 0000012A  9B DB E3		    finit       ; Init FPU
 0000012D  D9 05 00000125 R	    fld n1      ; Load first operand from global var
 00000133  D9 05 00000129 R	    fld n2      ; Load second operand from global var
 00000139  DE C1		    fadd        ; Add operands from FPU stack
 0000013B  D9 1E		    fstp DWORD PTR [ESI]    ; Pop result from FPU stack and cast as DWORD

 0000013D  61			    popad
 0000013E  5D			    pop EBP
 0000013F  C2 0004		    ret 4
 00000142			demoAdd ENDP


				; demoSub: Subtracts two parameters passed via stack using the CPU.
				;   Receives:
				;       n1 - Unsigned, integer operand passed via stack.
				;       n2 - Unsigned, integer operand passed via stack.
				;       rSub - DWORD memory reference to store result, passed via stack.
				;   Returns:
				;       Unsigned, integer result stored in memory.
				;   Preconditions:
				;       Push two operands and result offset to the stack.
				;       n1 >= n2
				;   Registers changed: None
 00000142			demoSub PROC
 00000142  55			    push EBP
 00000143  8B EC		    mov EBP, ESP
 00000145  60			    pushad

 00000146  8B 75 08		    mov ESI, [EBP + 8]      ; Memory location for result

 00000149  8B 45 10		    mov EAX, [EBP + 16]     ; Get first param from stack
 0000014C  8B 5D 0C		    mov EBX, [EBP + 12]     ; Get second param from stack

 0000014F  2B C3		    sub EAX, EBX            ; Subtract the two operands

 00000151  89 06		    mov [ESI], EAX          ; Store result in memory

 00000153  61			    popad
 00000154  5D			    pop EBP
 00000155  C2 000C		    ret 12
 00000158			demoSub ENDP


				; demoMul: Multiplies two parameters passed by reference via stack.
				;   Receives:
				;       n1 - DWORD passed by reference on stack.
				;       n2 - DWORD passed by reference on stack.
				;       rMul - DWORD memory reference for result.
				;   Returns:
				;       DWORD result stored in memory at offset rMul
				;   Preconditions:
				;       None
				;   Registers changed: None
 00000158			demoMul PROC
 00000158  55			    push EBP
 00000159  8B EC		    mov EBP, ESP
 0000015B  60			    pushad

 0000015C  B8 00000000		    mov EAX, 0              ; Init EAX to 0

 00000161  8B 75 10		    mov ESI, [EBP + 16]     ; Pointer to n1
 00000164  8A 06		    mov AL, BYTE PTR [ESI]  ; Cast n1 value to 8 bits
				    
 00000166  8B 75 0C		    mov ESI, [EBP + 12]     ; Pointer to n2
 00000169  F6 26		    mul BYTE PTR [ESI]      ; AX = AL * n2

 0000016B  8B 75 08		    mov ESI, [EBP + 8]      ; Memory location for result
 0000016E  66| 89 06		    mov [ESI], AX          ; Store result in memory

 00000171  61			    popad
 00000172  5D			    pop EBP
 00000173  C2 000C		    ret 12
 00000176			demoMul ENDP


				; demoDiv: Divides two parameters passed by register using the FPU.
				;   Receives:
				;       n1 - DWORD dividend in EAX
				;       n2 - DWORD divisor in EBX
				;       rDiv - REAL4 memory location for quotient
				;   Returns:
				;       REAL4 quotient saved to memory location rDiv.
				;   Preconditions: n2 must not be zero
				;   Registers changed: None
 00000176			demoDiv PROC
 00000176  55			    push EBP
 00000177  8B EC		    mov EBP, ESP
 00000179  83 EC 08		    sub ESP, 8      ; Make room for 2 local REAL4s
 0000017C  60			    pushad

 0000017D  89 45 FC		    mov [EBP - 4], EAX        ; Store registers in local vars
 00000180  89 5D F8		    mov [EBP - 8], EBX

 00000183  8B 75 08		    mov ESI, [EBP + 8]     ; Memory location for quotient

 00000186  9B DB E3		    finit
 00000189  D9 45 FC		    fld REAL4 PTR [EBP - 4]
 0000018C  D8 75 F8		    fdiv REAL4 PTR [EBP - 8]        ; ST(0) = EAX / EBX
 0000018F  D9 1E		    fstp REAL4 PTR [ESI]

 00000191  61			    popad
 00000192  8B E5		    mov ESP, EBP
 00000194  5D			    pop EBP
 00000195  C2 0004		    ret 4
 00000198			demoDiv ENDP


				; printResults: Load values from memory and print them.
				;   Receives:
				;       Global vars: n1, n2, radd, rsub, rmul, rdiv
				;       Global consts: add_str, sub_str, mul_str, div_str, equ_str
				;   Returns: None
				;   Preconditions: Call all 4 of the demoOPX procs, store results in the listed 
				;                   global vars.
				;   Registers changed: None
 00000198			printResults PROC
 00000198  60			    pushad

 00000199  E8 00000000 E	    call Crlf

				    ; ADDITION RESULT
 0000019E  A1 00000125 R	    mov EAX, n1
 000001A3  E8 00000000 E	    call WriteDec
 000001A8  BA 000000DF R	    mov EDX, offset add_str
 000001AD  E8 00000000 E	    call WriteString
 000001B2  A1 00000129 R	    mov EAX, n2
 000001B7  E8 00000000 E	    call WriteDec
 000001BC  BA 000000FB R	    mov EDX, offset equ_str
 000001C1  E8 00000000 E	    call WriteString
 000001C6  A1 0000012D R	    mov EAX, radd
 000001CB  E8 00000000 E	    call WriteDec
 000001D0  E8 00000000 E	    call Crlf

				    ; SUBTRACTION RESULT
 000001D5  A1 00000125 R	    mov EAX, n1
 000001DA  E8 00000000 E	    call WriteDec
 000001DF  BA 000000E3 R	    mov EDX, offset sub_str
 000001E4  E8 00000000 E	    call WriteString
 000001E9  A1 00000129 R	    mov EAX, n2
 000001EE  E8 00000000 E	    call WriteDec
 000001F3  BA 000000FB R	    mov EDX, offset equ_str
 000001F8  E8 00000000 E	    call WriteString
 000001FD  A1 00000131 R	    mov EAX, rsub
 00000202  E8 00000000 E	    call WriteDec
 00000207  E8 00000000 E	    call Crlf

				    ; MULTIPLICATION RESULT
 0000020C  A1 00000125 R	    mov EAX, n1
 00000211  E8 00000000 E	    call WriteDec
 00000216  BA 000000E7 R	    mov EDX, offset mul_str
 0000021B  E8 00000000 E	    call WriteString
 00000220  A1 00000129 R	    mov EAX, n2
 00000225  E8 00000000 E	    call WriteDec
 0000022A  BA 000000FB R	    mov EDX, offset equ_str
 0000022F  E8 00000000 E	    call WriteString
 00000234  A1 00000135 R	    mov EAX, rmul
 00000239  E8 00000000 E	    call WriteDec
 0000023E  E8 00000000 E	    call Crlf

				    ; DIVISION RESULT
 00000243  A1 00000125 R	    mov EAX, n1
 00000248  E8 00000000 E	    call WriteDec
 0000024D  BA 000000EB R	    mov EDX, offset div_str
 00000252  E8 00000000 E	    call WriteString
 00000257  A1 00000129 R	    mov EAX, n2
 0000025C  E8 00000000 E	    call WriteDec
 00000261  BA 000000FB R	    mov EDX, offset equ_str
 00000266  E8 00000000 E	    call WriteString
 0000026B  9B DB E3		    finit
 0000026E  D9 05 00000139 R	    fld rdiv
 00000274  E8 00000000 E	    call WriteFloat
 00000279  E8 00000000 E	    call Crlf

 0000027E  61			    popad
 0000027F  C3			    ret
 00000280			printResults ENDP


				; outro: Prints a goodbye message for the user, who we'll miss dearly.
				;   Receives: Global constant bye_str
				;   Returns: None
				;   Preconditions: Initialize bye_str
				;   Registers changed: None
 00000280			outro PROC
 00000280  60			    pushad

 00000281  E8 00000000 E	    call Crlf
 00000286  BA 000000FF R	    mov EDX, offset bye_str
 0000028B  E8 00000000 E	    call WriteString
 00000290  E8 00000000 E	    call Crlf

 00000295  61			    popad
 00000296  C3			    ret
 00000297			outro ENDP

				END main
Microsoft (R) Macro Assembler Version 14.23.28106.4	    11/15/19 20:13:19
3Arithmetic Demo with Procedures           (hw3.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000013D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000297 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
demoAdd  . . . . . . . . . . . .	P Near	 00000123 _TEXT	Length= 0000001F Public STDCALL
demoDiv  . . . . . . . . . . . .	P Near	 00000176 _TEXT	Length= 00000022 Public STDCALL
demoMul  . . . . . . . . . . . .	P Near	 00000158 _TEXT	Length= 0000001E Public STDCALL
demoSub  . . . . . . . . . . . .	P Near	 00000142 _TEXT	Length= 00000016 Public STDCALL
getInput . . . . . . . . . . . .	P Near	 000000B2 _TEXT	Length= 00000071 Public STDCALL
  validateLoop . . . . . . . . .	L Near	 000000B6 _TEXT	
  lowBound . . . . . . . . . . .	L Near	 000000CF _TEXT	
  highBound  . . . . . . . . . .	L Near	 000000F4 _TEXT	
  inBound  . . . . . . . . . . .	L Near	 00000119 _TEXT	
intro  . . . . . . . . . . . . .	P Near	 0000007D _TEXT	Length= 00000035 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007D Public STDCALL
outro  . . . . . . . . . . . . .	P Near	 00000280 _TEXT	Length= 00000017 Public STDCALL
printResults . . . . . . . . . .	P Near	 00000198 _TEXT	Length= 000000E8 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ADD_CONST  . . . . . . . . . . .	Text   	 " + ", 0
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AUTH_NAME  . . . . . . . . . . .	Text   	 "by Zach Colbert", 0
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DIV_CONST  . . . . . . . . . . .	Text   	 " / ", 0
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EQU_CONST  . . . . . . . . . . .	Text   	 " = ", 0
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MUL_CONST  . . . . . . . . . . .	Text   	 " * ", 0
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
OP_MAX . . . . . . . . . . . . .	Number	 0000000Ah   
OP_MIN . . . . . . . . . . . . .	Number	 00000001h   
PROG_NAME  . . . . . . . . . . .	Text   	 "Arithmetic Demo with Procedures", 0
PROMPT_1 . . . . . . . . . . . .	Text   	 "First operand [1-10]: ", 0
PROMPT_2 . . . . . . . . . . . .	Text   	 "Second operand [1-10]: ", 0
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
REM_CONST  . . . . . . . . . . .	Text   	 " remainder ", 0
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SUB_CONST  . . . . . . . . . . .	Text   	 " - ", 0
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TOO_HIGH . . . . . . . . . . . .	Text   	 " is too large. Enter a number at most ", 0
TOO_LOW  . . . . . . . . . . . .	Text   	 " is too small. Enter a number at least ", 0
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_INSTRUCTION . . . . . . . .	Text   	 "Enter two positive integers for arithmetic demo.", 0
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
add_str  . . . . . . . . . . . .	Byte	 000000DF _DATA	
authName . . . . . . . . . . . .	Byte	 00000020 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bye_str  . . . . . . . . . . . .	Byte	 000000FF _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
div_str  . . . . . . . . . . . .	Byte	 000000EB _DATA	
equ_str  . . . . . . . . . . . .	Byte	 000000FB _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mul_str  . . . . . . . . . . . .	Byte	 000000E7 _DATA	
n1 . . . . . . . . . . . . . . .	DWord	 00000125 _DATA	
n2 . . . . . . . . . . . . . . .	DWord	 00000129 _DATA	
progName . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000061 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000078 _DATA	
radd . . . . . . . . . . . . . .	DWord	 0000012D _DATA	
rdiv . . . . . . . . . . . . . .	DWord	 00000139 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rem_str  . . . . . . . . . . . .	Byte	 000000EF _DATA	
rmul . . . . . . . . . . . . . .	DWord	 00000135 _DATA	
rsub . . . . . . . . . . . . . .	DWord	 00000131 _DATA	
sub_str  . . . . . . . . . . . .	Byte	 000000E3 _DATA	
uInstr . . . . . . . . . . . . .	Byte	 00000030 _DATA	
valTooHigh . . . . . . . . . . .	Byte	 000000B8 _DATA	
valTooLow  . . . . . . . . . . .	Byte	 00000090 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
