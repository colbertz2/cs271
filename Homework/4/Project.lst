Microsoft (R) Macro Assembler Version 14.23.28106.4	    11/27/19 22:29:26
 Arrays and Sorting     (hw4.asm			     Page 1 - 1


				TITLE Arrays and Sorting     (hw4.asm)

				; Author: Zach Colbert
				; CS 271 / Homework 4                 Date: 27 November 2019
				; Description: Creates an array of random integers and sorts it.

				; LIBRARY INCLUDES
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE customMacros.inc
			      C mReadString MACRO buffer, lenBuffer, maxSize
			      C     push EDX
			      C     push ECX
			      C     push EAX
			      C 
			      C     mov EDX, OFFSET buffer
			      C     mov ECX, maxSize
			      C     call ReadString
			      C 
			      C     mov [lenBuffer], EAX
			      C 
			      C     pop EAX
			      C     pop ECX
			      C     pop EDX
			      C ENDM
			      C 
			      C mReadDec MACRO buffer
			      C     push EAX
			      C     pushf
			      C 
			      C     call ReadDec
			      C     mov [buffer], EAX
			      C 
			      C     popf
			      C     pop EAX
			      C ENDM
			      C 
			      C mReadInt MACRO buffer
			      C     push EAX
			      C     pushf
			      C 
			      C     call ReadInt
			      C     mov [buffer], EAX
			      C     
			      C     popf
			      C     pop EAX
			      C ENDM
			      C 
			      C mReadFloat MACRO buffer
			      C     call ReadFloat
			      C     fstp buffer
			      C ENDM
			      C 
			      C mRandomize MACRO
			      C     call Randomize
			      C ENDM
			      C 
			      C mRandomRange MACRO buffer, hi, lo
			      C     push EAX
			      C 
			      C     mov EAX, hi
			      C     sub EAX, lo
			      C     inc EAX
			      C     call RandomRange
			      C     add EAX, lo
			      C     mov [buffer], EAX
			      C 
			      C     pop EAX
			      C ENDM
			      C 
			      C mWriteString MACRO buffer
			      C     push    EDX
			      C     mov     EDX, buffer
			      C     call    WriteString
			      C     pop     EDX
			      C ENDM
			      C 
			      C mWriteDec MACRO num
			      C     push    EAX
			      C     mov     EAX, num
			      C     call    WriteDec
			      C     pop     EAX
			      C ENDM
			      C 
			      C mWriteInt MACRO num
			      C     push    EAX
			      C     mov     EAX, num
			      C     call WriteInt
			      C     pop     EAX
			      C ENDM
			      C 
			      C mWriteFloat MACRO buffer
			      C     fld buffer
			      C     call WriteFloat
			      C     fstp st(0)  ; Throw away the top of the stack
			      C ENDM
			      C 
			      C mNewLine MACRO
			      C     call Crlf
			      C ENDM
			      C 
			      C mCrlf MACRO
			      C     call Crlf
			      C ENDM
			      C 
			      C mClearScreen MACRO
			      C     call ClrScr
			      C ENDM
			      C 
			      C mClrScr MACRO
			      C     call ClrScr
			      C ENDM
			      C 

				; MACRO DEFINITIONS
				; mArrayIndex
				;   Advance ESI to the given DWORD array index.
				mArrayIndex MACRO array, i
				    LOCAL advance

				    push ECX
				    pushf

				    mov ESI, array
				    mov ECX, i

				    advance:
				        add ESI, sizeof DWORD
				        loop advance

				    popf
				    pop ECX
				ENDM

				; mArraySwap
				;   Swap two values in an array at indices i and j
				mArraySwap MACRO array, i, j
				    push ESI
				    push EDI
				    pushf

				    mArrayIndex array, i
				    push [ESI]          ; Get value from i
				    mov EDI, ESI        ; Save pointer to this index

				    mArrayIndex array, j
				    push [ESI]          ; Get value from j

				    pop [EDI]           ; Save [j] to i
				    pop [ESI]           ; Save [i] to j

				    popf
				    pop EDI
				    pop ESI
				ENDM

				; CONSTANT DEFINITIONS
 = 0000000A			INPUT_MIN = 10
 = 000000C8			INPUT_MAX = 200
 = 00000064			RAND_MIN = 100
 = 000003E7			RAND_MAX = 999
 = 0000000A			PRINT_PER_LINE = 10
 = 0000001E			HLINE_LENGTH = 30

 00000000			.data
				    ; Intro variables
 00000000 41 72 72 61 79	    progName    BYTE    "Array Sorting Demo", 0
	   20 53 6F 72 74
	   69 6E 67 20 44
	   65 6D 6F 00
 00000013 62 79 20 5A 61	    authName    BYTE    "by Zach Colbert", 0
	   63 68 20 43 6F
	   6C 62 65 72 74
	   00
 00000023  0000001E [		    hline       BYTE    HLINE_LENGTH DUP("-"), 0
	    2D
	   ] 00
 00000042  0000001E [		    dhline      BYTE    HLINE_LENGTH DUP("="), 0
	    3D
	   ] 00

				    ; User input variables
 00000061 45 6E 74 65 72	    prompt1     BYTE    "Enter integer length of array [", 0
	   20 69 6E 74 65
	   67 65 72 20 6C
	   65 6E 67 74 68
	   20 6F 66 20 61
	   72 72 61 79 20
	   5B 00
 00000081 20 2D 20 00		    prompt2     BYTE    " - ", 0
 00000085 5D 3A 20 00		    prompt3     BYTE    "]: ", 0
 00000089 20 69 73 20 74	    tooHi       BYTE    " is too high. Try again.", 0
	   6F 6F 20 68 69
	   67 68 2E 20 54
	   72 79 20 61 67
	   61 69 6E 2E 00
 000000A2 20 69 73 20 74	    tooLo       BYTE    " is too low. Try again.", 0
	   6F 6F 20 6C 6F
	   77 2E 20 54 72
	   79 20 61 67 61
	   69 6E 2E 00
 000000BA 00000000		    arrLength   DWORD   ?

				    ; Unsorted array variables
 000000BE 55 6E 73 6F 72	    unsortHead  BYTE    "Unsorted Array Contents: ", 0
	   74 65 64 20 41
	   72 72 61 79 20
	   43 6F 6E 74 65
	   6E 74 73 3A 20
	   00

				    ; Sorted array variables
 000000D8 53 6F 72 74 65	    sortHead    BYTE    "Sorted Array Contents: ", 0
	   64 20 41 72 72
	   61 79 20 43 6F
	   6E 74 65 6E 74
	   73 3A 20 00
 000000F0 2C 20 00		    delimiter   BYTE    ", ", 0

				    ; Array space in memory
 000000F3  000000C8 [		    list        DWORD   INPUT_MAX DUP(?)    ; Only need WORD b/c max is small?
	    00000000
	   ]

				    ; Array statistics variables
 00000413 00000000		    arrMedian   DWORD   ?
 00000417 00000000		    arrMean     DWORD   ?

 00000000			.code
 00000000			main PROC
 00000000  E8 00000036		    call intro

 00000005  68 000000BA R	    push OFFSET arrLength
 0000000A  E8 00000078		    call getUserInput

 0000000F  68 000000F3 R	    push OFFSET list
 00000014  FF 35 000000BA R	    push arrLength
 0000001A  E8 00000116		    call arrayFillRandom

 0000001F  68 000000F3 R	    push OFFSET list
 00000024  FF 35 000000BA R	    push arrLength
 0000002A  68 000000BE R	    push OFFSET unsortHead
 0000002F  E8 00000135		    call arrayPrint

				    exit    ; exit to operating system
 00000034  6A 00	   *	    push   +000000000h
 00000036  E8 00000000 E   *	    call   ExitProcess
 0000003B			main ENDP

				; intro
				;   Prints introductory information about the program.
				;
				;   Receives: 
				;       Global variables progName, authName, dhline
				;   Returns: 
				;       None
				;   Preconditions: 
				;       None
				;   Changes Registers: 
				;       None
 0000003B			intro PROC
 0000003B  52			    push EDX
				    mWriteString OFFSET dhline
 0000003C  52		     1	    push    EDX
 0000003D  BA 00000042 R     1	    mov     EDX, OFFSET dhline
 00000042  E8 00000000 E     1	    call    WriteString
 00000047  5A		     1	    pop     EDX
				    mNewLine
 00000048  E8 00000000 E     1	    call Crlf
				    mWriteString OFFSET progName
 0000004D  52		     1	    push    EDX
 0000004E  BA 00000000 R     1	    mov     EDX, OFFSET progName
 00000053  E8 00000000 E     1	    call    WriteString
 00000058  5A		     1	    pop     EDX
				    mNewLine
 00000059  E8 00000000 E     1	    call Crlf
				    mWriteString OFFSET authName
 0000005E  52		     1	    push    EDX
 0000005F  BA 00000013 R     1	    mov     EDX, OFFSET authName
 00000064  E8 00000000 E     1	    call    WriteString
 00000069  5A		     1	    pop     EDX
				    mNewLine
 0000006A  E8 00000000 E     1	    call Crlf
				    mWriteString OFFSET dhline
 0000006F  52		     1	    push    EDX
 00000070  BA 00000042 R     1	    mov     EDX, OFFSET dhline
 00000075  E8 00000000 E     1	    call    WriteString
 0000007A  5A		     1	    pop     EDX
				    mNewLine
 0000007B  E8 00000000 E     1	    call Crlf
				    mNewLine
 00000080  E8 00000000 E     1	    call Crlf
 00000085  5A			    pop EDX
 00000086  C3			    ret
 00000087			intro ENDP

				; getUserInput
				;   Prompts the user for a single, unsigned integer input.
				;   If the input is outside the given range, the user is prompted again.
				;
				;   Receives:
				;       Global byte strings prompt1, prompt2, prompt3, tooHi, tooLo
				;       Global constant DWORDs INPUT_MIN, INPUT_MAX
				;       Reference to DWORD variable in which to store input.
				;   Returns:
				;       DWORD unsigned integer.
				;   Preconditions:
				;       None
				;   Changes Registers:
				;       None
 00000087			getUserInput PROC    
 00000087  55			    push EBP
 00000088  8B EC		    mov EBP, ESP
 0000008A  50			    push EAX
 0000008B  52			    push EDX
 0000008C  56			    push ESI

 0000008D			    prompt:
				        mWriteString OFFSET prompt1
 0000008D  52		     1	    push    EDX
 0000008E  BA 00000061 R     1	    mov     EDX, OFFSET prompt1
 00000093  E8 00000000 E     1	    call    WriteString
 00000098  5A		     1	    pop     EDX
				        mWriteDec INPUT_MIN
 00000099  50		     1	    push    EAX
 0000009A  B8 0000000A	     1	    mov     EAX, INPUT_MIN
 0000009F  E8 00000000 E     1	    call    WriteDec
 000000A4  58		     1	    pop     EAX
				        mWriteString OFFSET prompt2
 000000A5  52		     1	    push    EDX
 000000A6  BA 00000081 R     1	    mov     EDX, OFFSET prompt2
 000000AB  E8 00000000 E     1	    call    WriteString
 000000B0  5A		     1	    pop     EDX
				        mWriteDec INPUT_MAX
 000000B1  50		     1	    push    EAX
 000000B2  B8 000000C8	     1	    mov     EAX, INPUT_MAX
 000000B7  E8 00000000 E     1	    call    WriteDec
 000000BC  58		     1	    pop     EAX
				        mWriteString OFFSET prompt3
 000000BD  52		     1	    push    EDX
 000000BE  BA 00000085 R     1	    mov     EDX, OFFSET prompt3
 000000C3  E8 00000000 E     1	    call    WriteString
 000000C8  5A		     1	    pop     EDX

				    ; Writing to memory and reading from memory again is not optimal
				    ; But it's how the macro works
 000000C9  8B 75 08		    mov ESI, [EBP + 8]
				    mReadDec ESI
 000000CC  50		     1	    push EAX
 000000CD  66| 9C	     1	    pushf
 000000CF  E8 00000000 E     1	    call ReadDec
 000000D4  89 06	     1	    mov [ESI], EAX
 000000D6  66| 9D	     1	    popf
 000000D8  58		     1	    pop EAX
 000000D9  8B 06		    mov EAX, [ESI]

 000000DB  83 F8 0A		    cmp EAX, INPUT_MIN
 000000DE  7C 09		    jl boundLo
 000000E0  3D 000000C8		    cmp EAX, INPUT_MAX
 000000E5  7F 23		    jg boundHi
 000000E7  EB 45		    jmp fin

 000000E9			    boundLo:
				        mWriteDec EAX
 000000E9  50		     1	    push    EAX
 000000EA  8B C0	     1	    mov     EAX, EAX
 000000EC  E8 00000000 E     1	    call    WriteDec
 000000F1  58		     1	    pop     EAX
				        mWriteString OFFSET tooLo
 000000F2  52		     1	    push    EDX
 000000F3  BA 000000A2 R     1	    mov     EDX, OFFSET tooLo
 000000F8  E8 00000000 E     1	    call    WriteString
 000000FD  5A		     1	    pop     EDX
				        mNewLine
 000000FE  E8 00000000 E     1	    call Crlf
				        mNewLine
 00000103  E8 00000000 E     1	    call Crlf
 00000108  EB 83		        jmp prompt

 0000010A			    boundHi:
				        mWriteDec EAX
 0000010A  50		     1	    push    EAX
 0000010B  8B C0	     1	    mov     EAX, EAX
 0000010D  E8 00000000 E     1	    call    WriteDec
 00000112  58		     1	    pop     EAX
				        mWriteString OFFSET tooHi
 00000113  52		     1	    push    EDX
 00000114  BA 00000089 R     1	    mov     EDX, OFFSET tooHi
 00000119  E8 00000000 E     1	    call    WriteString
 0000011E  5A		     1	    pop     EDX
				        mNewLine
 0000011F  E8 00000000 E     1	    call Crlf
				        mNewLine
 00000124  E8 00000000 E     1	    call Crlf
 00000129  E9 FFFFFF5F		        jmp prompt

 0000012E			    fin:
 0000012E  5E			    pop ESI
 0000012F  5A			    pop EDX
 00000130  58			    pop EAX
 00000131  5D			    pop EBP
 00000132  C2 0004		    ret 4
 00000135			getUserInput ENDP

				; arrayFillRandom
				;   Fills an array with random numbers between RAND_MIN and RAND_MAX
				;
				;   Receives:
				;       Global constants RAND_MIN, RAND_MAX
				;       Pointer to DWORD array, via stack
				;       DWORD size of array, via stack
				;   Returns:
				;       Array filled with random unsigned integer values.
				;   Preconditions:
				;       Array size passed to this proc must be less or equal to
				;       allocated space in memory.
				;   Changes registers:
				;       None
 00000135			arrayFillRandom PROC
 00000135  55			    push EBP
 00000136  8B EC		    mov EBP, ESP
 00000138  51			    push ECX
 00000139  56			    push ESI
 0000013A  66| 9C		    pushf

				    mRandomize      ; Set random number seed
 0000013C  E8 00000000 E     1	    call Randomize
 00000141  8B 75 0C		    mov ESI, [EBP + 12]     ; Pointer to first array elem
 00000144  8B 4D 08		    mov ECX, [EBP + 8]      ; ECX = Array size

				    ; Use counted loop to fill array elements
 00000147			    topLoop:
				        ; Save a random number to the current element
				        mRandomRange ESI, RAND_MAX, RAND_MIN
 00000147  50		     1	    push EAX
 00000148  B8 000003E7	     1	    mov EAX, RAND_MAX
 0000014D  83 E8 64	     1	    sub EAX, RAND_MIN
 00000150  40		     1	    inc EAX
 00000151  E8 00000000 E     1	    call RandomRange
 00000156  83 C0 64	     1	    add EAX, RAND_MIN
 00000159  89 06	     1	    mov [ESI], EAX
 0000015B  58		     1	    pop EAX
 0000015C  83 C6 04		        add ESI, sizeof DWORD   ; Advance to next element
 0000015F  E2 E6		        loop topLoop    ; Loop again if ECX != 0

 00000161			    postLoop:
 00000161  66| 9D		    popf
 00000163  5E			    pop ESI
 00000164  59			    pop ECX
 00000165  5D			    pop EBP
 00000166  C2 0008		    ret 8
 00000169			arrayFillRandom ENDP

				; arrayPrint
				;   Prints the contents of an array of unsigned ints.
				;
				;   Receives:
				;       Global constants, PRINT_PER_LINE and DELIMITER
				;       Pointer to DWORD array, via stack (reference).
				;       DWORD size of array, via stack (value).
				;       Pointer to BYTE string, via stack.
				;           (Prints additional info before array elements).
				;   Returns:
				;       Array contents printed to console, max PRINT_PER_LINE
				;       elements per line and delimited by string DELIMITER.
				;   Preconditions:
				;       None
				;   Changes Registers:
				;       None
 00000169			arrayPrint PROC
 00000169  55			    push EBP
 0000016A  8B EC		    mov EBP, ESP
 0000016C  50			    push EAX
 0000016D  51			    push ECX
 0000016E  56			    push ESI
 0000016F  66| 9C		    pushf

 00000171  8B 75 08		    mov ESI, [EBP + 8]      ; Pointer to info string
				    mWriteString ESI
 00000174  52		     1	    push    EDX
 00000175  8B D6	     1	    mov     EDX, ESI
 00000177  E8 00000000 E     1	    call    WriteString
 0000017C  5A		     1	    pop     EDX
				    mNewLine
 0000017D  E8 00000000 E     1	    call Crlf

 00000182  8B 75 10		    mov ESI, [EBP + 16]     ; Pointer to first array elem
 00000185  8B 4D 0C		    mov ECX, [EBP + 12]     ; ECX = array size
 00000188  B8 00000000		    mov EAX, 0              ; Init EAX = 0

 0000018D			    topLoop:
				        mWriteDec [ESI]         ; Write element to console
 0000018D  50		     1	    push    EAX
 0000018E  8B 06	     1	    mov     EAX, [ESI]
 00000190  E8 00000000 E     1	    call    WriteDec
 00000195  58		     1	    pop     EAX
 00000196  83 C6 04		        add ESI, sizeof DWORD   ; Advance to next element
 00000199  40			        inc EAX                 ; EAX += 1
				        
 0000019A  83 F9 01		        cmp ECX, 1
 0000019D  74 16		        je continue             ; Follow each element with a delimiter
				        mWriteString OFFSET DELIMITER  ; Except after last element
 0000019F  52		     1	    push    EDX
 000001A0  BA 000000F0 R     1	    mov     EDX, OFFSET DELIMITER
 000001A5  E8 00000000 E     1	    call    WriteString
 000001AA  5A		     1	    pop     EDX
				        
 000001AB  83 F8 0A		        cmp EAX, PRINT_PER_LINE
 000001AE  75 05		        jne continue            ; Insert newline every few elements
				        mNewLine
 000001B0  E8 00000000 E     1	    call Crlf

 000001B5			        continue:
 000001B5  E2 D6		            loop topLoop

				    mNewLine
 000001B7  E8 00000000 E     1	    call Crlf
				    mNewLine
 000001BC  E8 00000000 E     1	    call Crlf

 000001C1  66| 9D		    popf
 000001C3  5E			    pop ESI
 000001C4  59			    pop ECX
 000001C5  58			    pop EAX
 000001C6  5D			    pop EBP
 000001C7  C2 000C		    ret 12
 000001CA			arrayPrint ENDP

				; arrayQuickSort
				;   Uses the Quicksort algorithm to sort the given array in place.
				;   Based on info and algorithms from https://www.geeksforgeeks.org/quick-sort/
				;
				;   Receives:
				;       Pointer to DWORD array, via stack (reference).
				;       DWORD starting index, via stack (value). Initially call with 0.
				;       DWORD ending index, via stack (value). Initially call with max index.
				;   Returns:
				;       Sorted array in memory.
				;   Preconditions:
				;       None.
				;   Registers Changed:
				;       None.
 000001CA			arrayQuickSort PROC
 000001CA  55			    push EBP
 000001CB  8B EC		    mov EBP, ESP
 000001CD  50			    push EAX
 000001CE  53			    push EBX
 000001CF  66| 9C		    pushf

 000001D1  8B 45 0C		    mov EAX, [EBP + 12]     ; EAX = Starting index (lo)
 000001D4  3B 45 08		    cmp EAX, [EBP + 8]      ; Compare lo to ending index (hi)
 000001D7  7D 21		    jge postcon             ; if (lo < hi) { ... } else { return; }

 000001D9  E8 00000024		    call qsPartition        ; EAX = partition index (pi)
 000001DE  8B D8		    mov EBX, EAX
 000001E0  48			    dec EAX         ; EAX = pi - 1
 000001E1  43			    inc EBX         ; EBX = pi + 1

 000001E2  FF 75 10		    push [EBP + 16]         ; Array pointer
 000001E5  FF 75 0C		    push [EBP + 12]         ; Same lo value
 000001E8  50			    push EAX                ; Pass pi - 1 as hi
 000001E9  E8 FFFFFFDC		    call arrayQuickSort     ; Sort the parts of the array up to pi

 000001EE  FF 75 10		    push [EBP + 16]         ; Array pointer
 000001F1  53			    push EBX                ; Pass pi + 1 as lo
 000001F2  FF 75 08		    push [EBP + 8]          ; Same hi value
 000001F5  E8 FFFFFFD0		    call arrayQuickSort     ; Sort the parts of the array after pi

 000001FA			    postcon:
 000001FA  66| 9D		    popf
 000001FC  5B			    pop EBX
 000001FD  58			    pop EAX
 000001FE  5D			    pop EBP
 000001FF  C2 000C		    ret 12
 00000202			arrayQuickSort ENDP

				; qsPartition
 00000202			qsPartition PROC    ; +16 array, +12 lo, +8 hi
 00000202  55			    push EBP
 00000203  8B EC		    mov EBP, ESP
 00000205  56			    push ESI
 00000206  53			    push EBX
 00000207  51			    push ECX
 00000208  57			    push EDI
 00000209  66| 9C		    pushf

				    mArrayIndex [EBP + 16], [EBP + 8]   ; ESI = (array + hi)
 0000020B  51		     1	    push ECX
 0000020C  66| 9C	     1	    pushf
 0000020E  8B 75 10	     1	    mov ESI, [EBP + 16]
 00000211  8B 4D 08	     1	    mov ECX, [EBP + 8]
 00000214		     1	    ??0000:
 00000214  83 C6 04	     1	        add ESI, sizeof DWORD
 00000217  E2 FB	     1	        loop ??0000
 00000219  66| 9D	     1	    popf
 0000021B  59		     1	    pop ECX
 0000021C  FF 36		    push [ESI]      ; Save pivot value to stack

 0000021E  8B 5D 0C		    mov EBX, [EBP + 12]
 00000221  4B			    dec EBX             ; EBX = lo - 1
				    mArrayIndex [EBP + 16], [EBP + 12]      ; ESI (array + lo)
 00000222  51		     1	    push ECX
 00000223  66| 9C	     1	    pushf
 00000225  8B 75 10	     1	    mov ESI, [EBP + 16]
 00000228  8B 4D 0C	     1	    mov ECX, [EBP + 12]
 0000022B		     1	    ??0001:
 0000022B  83 C6 04	     1	        add ESI, sizeof DWORD
 0000022E  E2 FB	     1	        loop ??0001
 00000230  66| 9D	     1	    popf
 00000232  59		     1	    pop ECX
 00000233  8B 4D 0C		    mov ECX, [EBP + 12]     ; Loop counter = lo

 00000236			    sortLoop:
 00000236  8B 3E		        mov EDI, [ESI]
 00000238  8B 04 24		        mov EAX, [ESP]
 0000023B  3B F8		        cmp EDI, EAX        ; Compare current value to pivot value
 0000023D  7D 3C		        jge postLoop
 0000023F  43			        inc EBX         ; If current value < pivot
				        mArraySwap [EBP + 16], EBX, ECX
 00000240  56		     1	    push ESI
 00000241  57		     1	    push EDI
 00000242  66| 9C	     1	    pushf
 00000244  51		     2	    push ECX
 00000245  66| 9C	     2	    pushf
 00000247  8B 75 10	     2	    mov ESI, [EBP + 16]
 0000024A  8B CB	     2	    mov ECX, EBX
 0000024C		     2	    ??0002:
 0000024C  83 C6 04	     2	        add ESI, sizeof DWORD
 0000024F  E2 FB	     2	        loop ??0002
 00000251  66| 9D	     2	    popf
 00000253  59		     2	    pop ECX
 00000254  FF 36	     1	    push [ESI]          ; Get value from i
 00000256  8B FE	     1	    mov EDI, ESI        ; Save pointer to this index
 00000258  51		     2	    push ECX
 00000259  66| 9C	     2	    pushf
 0000025B  8B 75 10	     2	    mov ESI, [EBP + 16]
 0000025E  8B C9	     2	    mov ECX, ECX
 00000260		     2	    ??0003:
 00000260  83 C6 04	     2	        add ESI, sizeof DWORD
 00000263  E2 FB	     2	        loop ??0003
 00000265  66| 9D	     2	    popf
 00000267  59		     2	    pop ECX
 00000268  FF 36	     1	    push [ESI]          ; Get value from j
 0000026A  8F 07	     1	    pop [EDI]           ; Save [j] to i
 0000026C  8F 06	     1	    pop [ESI]           ; Save [i] to j
 0000026E  66| 9D	     1	    popf
 00000270  5F		     1	    pop EDI
 00000271  5E		     1	    pop ESI
 00000272  83 C6 04		        add ESI, sizeof DWORD   ; Advance to next element
 00000275  41			        inc ECX                 ; Advance to next element
 00000276  3B 4D 08		        cmp ECX, [EBP + 8]
 00000279  7C BB		        jl sortLoop

 0000027B			    postLoop:
 0000027B  43			        inc EBX             ; EBX = i + 1
				        mArraySwap [EBP + 16], EBX, [EBP + 8]   ; Swap [i+1] and [hi]
 0000027C  56		     1	    push ESI
 0000027D  57		     1	    push EDI
 0000027E  66| 9C	     1	    pushf
 00000280  51		     2	    push ECX
 00000281  66| 9C	     2	    pushf
 00000283  8B 75 10	     2	    mov ESI, [EBP + 16]
 00000286  8B CB	     2	    mov ECX, EBX
 00000288		     2	    ??0004:
 00000288  83 C6 04	     2	        add ESI, sizeof DWORD
 0000028B  E2 FB	     2	        loop ??0004
 0000028D  66| 9D	     2	    popf
 0000028F  59		     2	    pop ECX
 00000290  FF 36	     1	    push [ESI]          ; Get value from i
 00000292  8B FE	     1	    mov EDI, ESI        ; Save pointer to this index
 00000294  51		     2	    push ECX
 00000295  66| 9C	     2	    pushf
 00000297  8B 75 10	     2	    mov ESI, [EBP + 16]
 0000029A  8B 4D 08	     2	    mov ECX, [EBP + 8]
 0000029D		     2	    ??0005:
 0000029D  83 C6 04	     2	        add ESI, sizeof DWORD
 000002A0  E2 FB	     2	        loop ??0005
 000002A2  66| 9D	     2	    popf
 000002A4  59		     2	    pop ECX
 000002A5  FF 36	     1	    push [ESI]          ; Get value from j
 000002A7  8F 07	     1	    pop [EDI]           ; Save [j] to i
 000002A9  8F 06	     1	    pop [ESI]           ; Save [i] to j
 000002AB  66| 9D	     1	    popf
 000002AD  5F		     1	    pop EDI
 000002AE  5E		     1	    pop ESI
 000002AF  8B C3		        mov EAX, EBX        ; return i + 1

 000002B1  66| 9D		    popf
 000002B3  5F			    pop EDI
 000002B4  59			    pop ECX
 000002B5  5B			    pop EBX
 000002B6  5E			    pop ESI
 000002B7  5D			    pop EBP
 000002B8  C2 000C		    ret 12
 000002BB			qsPartition ENDP

				END main
Microsoft (R) Macro Assembler Version 14.23.28106.4	    11/27/19 22:29:26
 Arrays and Sorting     (hw4.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mArrayIndex  . . . . . . . . . .	Proc
mArraySwap . . . . . . . . . . .	Proc
mClearScreen . . . . . . . . . .	Proc
mClrScr  . . . . . . . . . . . .	Proc
mCrlf  . . . . . . . . . . . . .	Proc
mNewLine . . . . . . . . . . . .	Proc
mRandomRange . . . . . . . . . .	Proc
mRandomize . . . . . . . . . . .	Proc
mReadDec . . . . . . . . . . . .	Proc
mReadFloat . . . . . . . . . . .	Proc
mReadInt . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mWriteDec  . . . . . . . . . . .	Proc
mWriteFloat  . . . . . . . . . .	Proc
mWriteInt  . . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000041B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002BB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
arrayFillRandom  . . . . . . . .	P Near	 00000135 _TEXT	Length= 00000034 Public STDCALL
  topLoop  . . . . . . . . . . .	L Near	 00000147 _TEXT	
  postLoop . . . . . . . . . . .	L Near	 00000161 _TEXT	
arrayPrint . . . . . . . . . . .	P Near	 00000169 _TEXT	Length= 00000061 Public STDCALL
  topLoop  . . . . . . . . . . .	L Near	 0000018D _TEXT	
  continue . . . . . . . . . . .	L Near	 000001B5 _TEXT	
arrayQuickSort . . . . . . . . .	P Near	 000001CA _TEXT	Length= 00000038 Public STDCALL
  postcon  . . . . . . . . . . .	L Near	 000001FA _TEXT	
getUserInput . . . . . . . . . .	P Near	 00000087 _TEXT	Length= 000000AE Public STDCALL
  prompt . . . . . . . . . . . .	L Near	 0000008D _TEXT	
  boundLo  . . . . . . . . . . .	L Near	 000000E9 _TEXT	
  boundHi  . . . . . . . . . . .	L Near	 0000010A _TEXT	
  fin  . . . . . . . . . . . . .	L Near	 0000012E _TEXT	
intro  . . . . . . . . . . . . .	P Near	 0000003B _TEXT	Length= 0000004C Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000003B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
qsPartition  . . . . . . . . . .	P Near	 00000202 _TEXT	Length= 000000B9 Public STDCALL
  ??0000 . . . . . . . . . . . .	L Near	 00000214 _TEXT	
  ??0001 . . . . . . . . . . . .	L Near	 0000022B _TEXT	
  sortLoop . . . . . . . . . . .	L Near	 00000236 _TEXT	
  ??0002 . . . . . . . . . . . .	L Near	 0000024C _TEXT	
  ??0003 . . . . . . . . . . . .	L Near	 00000260 _TEXT	
  postLoop . . . . . . . . . . .	L Near	 0000027B _TEXT	
  ??0004 . . . . . . . . . . . .	L Near	 00000288 _TEXT	
  ??0005 . . . . . . . . . . . .	L Near	 0000029D _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HLINE_LENGTH . . . . . . . . . .	Number	 0000001Eh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INPUT_MAX  . . . . . . . . . . .	Number	 000000C8h   
INPUT_MIN  . . . . . . . . . . .	Number	 0000000Ah   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PRINT_PER_LINE . . . . . . . . .	Number	 0000000Ah   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RAND_MAX . . . . . . . . . . . .	Number	 000003E7h   
RAND_MIN . . . . . . . . . . . .	Number	 00000064h   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrLength  . . . . . . . . . . .	DWord	 000000BA _DATA	
arrMean  . . . . . . . . . . . .	DWord	 00000417 _DATA	
arrMedian  . . . . . . . . . . .	DWord	 00000413 _DATA	
authName . . . . . . . . . . . .	Byte	 00000013 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
delimiter  . . . . . . . . . . .	Byte	 000000F0 _DATA	
dhline . . . . . . . . . . . . .	Byte	 00000042 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hline  . . . . . . . . . . . . .	Byte	 00000023 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list . . . . . . . . . . . . . .	DWord	 000000F3 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
progName . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000061 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000081 _DATA	
prompt3  . . . . . . . . . . . .	Byte	 00000085 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortHead . . . . . . . . . . . .	Byte	 000000D8 _DATA	
tooHi  . . . . . . . . . . . . .	Byte	 00000089 _DATA	
tooLo  . . . . . . . . . . . . .	Byte	 000000A2 _DATA	
unsortHead . . . . . . . . . . .	Byte	 000000BE _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
